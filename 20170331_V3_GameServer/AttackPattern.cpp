#include "stdafx.h"
#include "TotalHeader.h"



// 2017.03.21 전달

//////////////////////////////////////////////////////////////////////
// 각종 컨텐츠용 패턴 테이블
//
// 
//////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------------
// 공격거리
// g_Pattern_AttackRange[공격타입 1 / 2][캐릭터타입 1 / 2 / 3 / 4 / 5]
// 각 타입을 그대로 쓰기 위해서, [0][0] 은 미사용됨.
//
// 공격거리를 얻을 때  
// 
// int Range = g_Pattern_AttackRange[AttackType][CharacterType];
//
// 으로 사용
//---------------------------------------------------------------------
int g_Pattern_AttackRange[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 4, 8, 9, 4, 9 }, { 0, 4, 9, 12, 4, 12 } };





//---------------------------------------------------------------------
// 다음 공격 가능 쿨타임 시간.(ms)
// g_Pattern_AttackTime[공격타입 1 / 2][캐릭터타입 1 / 2 / 3 / 4 / 5]
//
// int NextAttackTime = NowTime + g_Pattern_AttackTime[AttackType][CharacterType];
//
// 처럼 구하여 다음 공격 가능 시간을 구할 수 있음.
//---------------------------------------------------------------------
//int g_Pattern_AttackTime[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 1000, 800, 800, 1000, 700 }, { 0, 1500, 1100, 1300, 1500, 1200 } };
int g_Pattern_AttackTime[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 1000, 800, 800, 1000, 900 }, { 0, 1500, 1100, 1300, 1500, 1200 } };


//---------------------------------------------------------------------
// 공격 데미지
// g_Pattern_AttackPower[공격타입 1 / 2][캐릭터타입 1 / 2 / 3 / 4 / 5]
//
// int Damage = g_Pattern_AttackPower[AttackType][CharacterType];
//
//---------------------------------------------------------------------
//int g_Pattern_AttackPower[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 1500, 900, -700, 1500, 800 }, { 0, 900, 600, 450, 900, 600 } };
////int g_Pattern_AttackPower[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 220, 150, -100, 220, 150 }, { 0, 100, 70, 40, 100, 70 } };
int g_Pattern_AttackPower[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 900, 400, -700, 900, 400 }, { 0, 700, 500, 400, 700, 500 } };


								
//---------------------------------------------------------------------
// 범위공격 (Attack 2) 공격 패턴
//
// g_Pattern_AttackArea[캐릭터타입 1 / 2 / 3 / 4 / 5][N][0]  - X 상대좌표
// g_Pattern_AttackArea[캐릭터타입 1 / 2 / 3 / 4 / 5][N][1]  - Y 상대좌표
//
// 각 타입을 그대로 쓰기 위해서, [0] 은 미사용됨.
//
// 실제 사용시
// 
//	for ( Cnt = 0; Cnt < dfPATTERN_ATTACK_AREA_MAX; Cnt++ )
//	{
//		DistX = g_Pattern_AttackArea[CharacterType][Cnt][0];
//		DistY = g_Pattern_AttackArea[CharacterType][Cnt][1];
//
//		// 패턴 끝 중단.
//		if ( DistX == 255 || DisY == 255 )
//			break;
//
// 		CheckX = TileX + DistX;
//		CheckY = TileY + DistY;
//
//		CheckX / CheckY 타일의 오브젝트 검사
//
//	}
//
// 으로 사용   패턴 실 데이터는 밸런스 조절 후 제공.
//---------------------------------------------------------------------
#define dfPATTERN_ATTACK_AREA_MAX	37
int g_Pattern_AttackArea[6][dfPATTERN_ATTACK_AREA_MAX][2] = 
{
	// 0 캐릭터 미사용
	{ 
				              {-1, -3},{ 0, -3},{ 1, -3},
					 {-2, -2},{-1, -2},{ 0, -2},{ 1, -2},{ 2, -2},
		    {-3, -1},{-2, -1},{-1, -1},{ 0, -1},{ 1, -1},{ 2, -1}, { 3, -1},
		    {-3,  0},{-2,  0},{-1,  0},{ 0,  0},{ 1,  0},{ 2,  0}, { 3,  0},
			{-3,  1},{-2,  1},{-1,  1},{ 0,  1},{ 1,  1},{ 2,  1}, { 3,  1},
					 {-2,  2},{-1,  2},{ 0,  2},{ 1,  2},{ 2,  2},
				              {-1,  3},{ 0,  3},{ 1,  3} 
	},

	// 1 캐릭터 골렘
	{ 
				              {-1, -3},{ 0, -3},{ 1, -3},
					 {-2, -2},{-1, -2},{ 0, -2},{ 1, -2},{ 2, -2},
		    {-3, -1},{-2, -1},{-1, -1},{ 0, -1},{ 1, -1},{ 2, -1}, { 3, -1},
		    {-3,  0},{-2,  0},{-1,  0},{ 0,  0},{ 1,  0},{ 2,  0}, { 3,  0},
			{-3,  1},{-2,  1},{-1,  1},{ 0,  1},{ 1,  1},{ 2,  1}, { 3,  1},
					 {-2,  2},{-1,  2},{ 0,  2},{ 1,  2},{ 2,  2},
				              {-1,  3},{ 0,  3},{ 1,  3} 

	},

	// 2 캐릭터 기사
	{ 
				              {-1, -3},{ 0, -3},{ 1, -3},
					 {-2, -2},{-1, -2},{ 0, -2},{ 1, -2},{ 2, -2},
		    {-3, -1},{-2, -1},{-1, -1},{ 0, -1},{ 1, -1},{ 2, -1}, { 3, -1},
		    {-3,  0},{-2,  0},{-1,  0},{ 0,  0},{ 1,  0},{ 2,  0}, { 3,  0},
			{-3,  1},{-2,  1},{-1,  1},{ 0,  1},{ 1,  1},{ 2,  1}, { 3,  1},
					 {-2,  2},{-1,  2},{ 0,  2},{ 1,  2},{ 2,  2},
				              {-1,  3},{ 0,  3},{ 1,  3} 
	},

	// 3 캐릭터 엘프
	{ 
			         {-1, -3},{ 0, -3},{ 1, -3},
			{-2, -2},{-1, -2},{ 0, -2},{ 1, -2},{ 2, -2},
		    {-2, -1},{-1, -1},{ 0, -1},{ 1, -1},{ 2, -1},
		    {-2,  0},{-1,  0},{ 0,  0},{ 1,  0},{ 2,  0},
			{-2,  1},{-1,  1},{ 0,  1},{ 1,  1},{ 2,  1},
			{-2,  2},{-1,  2},{ 0,  2},{ 1,  2},{ 2,  2},
			         {-1,  3},{ 0,  3},{ 1,  3} ,

			{255, 255},{255, 255},{255, 255},{255, 255},{255, 255},
			{255, 255}
	},

	// 4 캐릭터 오크
	{ 
				              {-1, -3},{ 0, -3},{ 1, -3},
					 {-2, -2},{-1, -2},{ 0, -2},{ 1, -2},{ 2, -2},
		    {-3, -1},{-2, -1},{-1, -1},{ 0, -1},{ 1, -1},{ 2, -1}, { 3, -1},
		    {-3,  0},{-2,  0},{-1,  0},{ 0,  0},{ 1,  0},{ 2,  0}, { 3,  0},
			{-3,  1},{-2,  1},{-1,  1},{ 0,  1},{ 1,  1},{ 2,  1}, { 3,  1},
					 {-2,  2},{-1,  2},{ 0,  2},{ 1,  2},{ 2,  2},
				              {-1,  3},{ 0,  3},{ 1,  3} 
	},

	// 5 캐릭터 궁수
	{ 
				              {-1, -3},{ 0, -3},{ 1, -3},
					 {-2, -2},{-1, -2},{ 0, -2},{ 1, -2},{ 2, -2},
		    {-3, -1},{-2, -1},{-1, -1},{ 0, -1},{ 1, -1},{ 2, -1}, { 3, -1},
		    {-3,  0},{-2,  0},{-1,  0},{ 0,  0},{ 1,  0},{ 2,  0}, { 3,  0},
			{-3,  1},{-2,  1},{-1,  1},{ 0,  1},{ 1,  1},{ 2,  1}, { 3,  1},
					 {-2,  2},{-1,  2},{ 0,  2},{ 1,  2},{ 2,  2},
				              {-1,  3},{ 0,  3},{ 1,  3} 
	}
};
	







//---------------------------------------------------------------------
// 두 타일간의 거리 구하는 함수.
//---------------------------------------------------------------------
float Distance(int iTileX1, int iTileY1, int iTileX2, int iTileY2)
{
	int iDX = abs(iTileX1 - iTileX2);
	int iDY = abs(iTileY1 - iTileY2);

	//return sqrtf(iDX * iDX + iDY * iDY);
    return (float)(sqrtf(iDX * iDX + iDY * iDY));
}



//---------------------------------------------------------------------
// Pos1 -> Pos2 방향으로 Pos2 가 1.0f 거리만큼 밀려난 위치 PushX,PushY 를 구하는 함수.
//---------------------------------------------------------------------
void AttackPushPos(float fPos1X, float fPos1Y, float fPos2X, float fPos2Y, float *pPushX, float *pPushY)
{
	// 1. 벡터 생성
	float VectorX = fPos2X - fPos1X;		
	float VectorY = fPos2Y - fPos1Y;
	
	//-----------------------------------------------
	// 완전히 같은 자리라면 랜덤하게 방향을 잡음.
	//-----------------------------------------------
	while ( VectorX == 0 && VectorY == 0 )
	{
		VectorX = ((rand() % 10) - 5) / 10.0f;
		VectorY = ((rand() % 10) - 5) / 10.0f;
	}

	// 2. 노멀벡터 정규화
	float Len = sqrtf(VectorX * VectorX + VectorY * VectorY);

	VectorX = VectorX / Len;
	VectorY = VectorY / Len;

	// 3. 이동거리 1.0f 스칼라 곱
	*pPushX = fPos2X + VectorX * 0.8f;
	*pPushY = fPos2Y + VectorY * 0.8f;
}

/*

// 2017.03.03 전달

//////////////////////////////////////////////////////////////////////
// 각종 컨텐츠용 패턴 테이블
//
// 
//////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------------
// 공격거리
// g_Pattern_AttackRange[공격타입 1 / 2][캐릭터타입 1 / 2 / 3 / 4 / 5]
// 각 타입을 그대로 쓰기 위해서, [0][0] 은 미사용됨.
//
// 공격거리를 얻을 때  
// 
// int Range = g_Pattern_AttackRange[AttackType][CharacterType];
//
// 으로 사용
//---------------------------------------------------------------------
int g_Pattern_AttackRange[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 5, 7, 8, 5, 7 }, { 0, 8, 10, 14, 8, 14 } };





//---------------------------------------------------------------------
// 다음 공격 가능 쿨타임 시간.(ms)
// g_Pattern_AttackTime[공격타입 1 / 2][캐릭터타입 1 / 2 / 3 / 4 / 5]
//
// int NextAttackTime = NowTime + g_Pattern_AttackTime[AttackType][CharacterType];
//
// 처럼 구하여 다음 공격 가능 시간을 구할 수 있음.
//---------------------------------------------------------------------
int g_Pattern_AttackTime[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 1000, 1000, 3000, 2000, 1500 }, { 0, 3000, 2000, 4000, 7000, 5000 } };


//---------------------------------------------------------------------
// 공격 데미지
// g_Pattern_AttackPower[공격타입 1 / 2][캐릭터타입 1 / 2 / 3 / 4 / 5]
//
// int Damage = g_Pattern_AttackPower[AttackType][CharacterType];
//
//---------------------------------------------------------------------
//int g_Pattern_AttackPower[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 10, 10, -10, 10, 10 }, { 0, 15, 15, 15, 15, 15 } };
int g_Pattern_AttackPower[3][6] = { { 0, 0, 0, 0, 0, 0 }, { 0, 220, 150, -100, 220, 150 }, { 0, 100, 70, 40, 100, 70 } };



//---------------------------------------------------------------------
// 범위공격 (Attack 2) 공격 패턴
//
// g_Pattern_AttackArea[캐릭터타입 1 / 2 / 3 / 4 / 5][N][0]  - X 상대좌표
// g_Pattern_AttackArea[캐릭터타입 1 / 2 / 3 / 4 / 5][N][1]  - Y 상대좌표
//
// 각 타입을 그대로 쓰기 위해서, [0] 은 미사용됨.
//
// 실제 사용시
// 
//	for ( Cnt = 0; Cnt < dfPATTERN_ATTACK_AREA_MAX; Cnt++ )
//	{
//		DistX = g_Pattern_AttackArea[CharacterType][Cnt][0];
//		DistY = g_Pattern_AttackArea[CharacterType][Cnt][1];
//
//		// 패턴 끝 중단.
//		if ( DistX == 255 || DisY == 255 )
//			break;
//
// 		CheckX = TileX + DistX;
//		CheckY = TileY + DistY;
//
//		CheckX / CheckY 타일의 오브젝트 검사
//
//	}
//
// 으로 사용   패턴 실 데이터는 밸런스 조절 후 제공.
//---------------------------------------------------------------------
#define dfPATTERN_ATTACK_AREA_MAX	37
int g_Pattern_AttackArea[6][dfPATTERN_ATTACK_AREA_MAX][2] =
{
    // 0 캐릭터 미사용
    {
                                { -1, -3 }, { 0, -3 }, { 1, -3 },
                    { -2, -2 }, { -1, -2 }, { 0, -2 }, { 1, -2 }, { 2, -2 },
        { -3, -1 }, { -2, -1 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 2, -1 }, { 3, -1 },
        { -3,  0 }, { -2,  0 }, { -1,  0 }, { 0,  0 }, { 1,  0 }, { 2,  0 }, { 3,  0 },
        { -3,  1 }, { -2,  1 }, { -1,  1 }, { 0,  1 }, { 1,  1 }, { 2,  1 }, { 3,  1 },
                    { -2,  2 }, { -1,  2 }, { 0,  2 }, { 1,  2 }, { 2,  2 },
                                { -1,  3 }, { 0,  3 }, { 1,  3 }
    },

    // 1 캐릭터 골렘
    {
                                { -1, -3 }, { 0, -3 }, { 1, -3 },
                    { -2, -2 }, { -1, -2 }, { 0, -2 }, { 1, -2 }, { 2, -2 },
        { -3, -1 }, { -2, -1 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 2, -1 }, { 3, -1 },
        { -3,  0 }, { -2,  0 }, { -1,  0 }, { 0,  0 }, { 1,  0 }, { 2,  0 }, { 3,  0 },
        { -3,  1 }, { -2,  1 }, { -1,  1 }, { 0,  1 }, { 1,  1 }, { 2,  1 }, { 3,  1 },
                    { -2,  2 }, { -1,  2 }, { 0,  2 }, { 1,  2 }, { 2,  2 },
                                { -1,  3 }, { 0,  3 }, { 1,  3 }

    },

    // 2 캐릭터 기사
    {
                                { -1, -3 }, { 0, -3 }, { 1, -3 },
                    { -2, -2 }, { -1, -2 }, { 0, -2 }, { 1, -2 }, { 2, -2 },
        { -3, -1 }, { -2, -1 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 2, -1 }, { 3, -1 },
        { -3,  0 }, { -2,  0 }, { -1,  0 }, { 0,  0 }, { 1,  0 }, { 2,  0 }, { 3,  0 },
        { -3,  1 }, { -2,  1 }, { -1,  1 }, { 0,  1 }, { 1,  1 }, { 2,  1 }, { 3,  1 },
                    { -2,  2 }, { -1,  2 }, { 0,  2 }, { 1,  2 }, { 2,  2 },
                                { -1,  3 }, { 0,  3 }, { 1,  3 }
    },

    // 3 캐릭터 엘프
    {
                    { -1, -3 }, { 0, -3 }, { 1, -3 },
        { -2, -2 }, { -1, -2 }, { 0, -2 }, { 1, -2 }, { 2, -2 },
        { -2, -1 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 2, -1 },
        { -2,  0 }, { -1,  0 }, { 0,  0 }, { 1,  0 }, { 2,  0 },
        { -2,  1 }, { -1,  1 }, { 0,  1 }, { 1,  1 }, { 2,  1 },
        { -2,  2 }, { -1,  2 }, { 0,  2 }, { 1,  2 }, { 2,  2 },
                    { -1,  3 }, { 0,  3 }, { 1,  3 },

        { 255, 255 }, { 255, 255 }, { 255, 255 }, { 255, 255 }, { 255, 255 },
        { 255, 255 }
    },

    // 4 캐릭터 오크
    {
                                { -1, -3 }, { 0, -3 }, { 1, -3 },
                    { -2, -2 }, { -1, -2 }, { 0, -2 }, { 1, -2 }, { 2, -2 },
        { -3, -1 }, { -2, -1 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 2, -1 }, { 3, -1 },
        { -3,  0 }, { -2,  0 }, { -1,  0 }, { 0,  0 }, { 1,  0 }, { 2,  0 }, { 3,  0 },
        { -3,  1 }, { -2,  1 }, { -1,  1 }, { 0,  1 }, { 1,  1 }, { 2,  1 }, { 3,  1 },
                    { -2,  2 }, { -1,  2 }, { 0,  2 }, { 1,  2 }, { 2,  2 },
                                { -1,  3 }, { 0,  3 }, { 1,  3 }
    },

    // 5 캐릭터 궁수
    {
                                { -1, -3 }, { 0, -3 }, { 1, -3 },
                    { -2, -2 }, { -1, -2 }, { 0, -2 }, { 1, -2 }, { 2, -2 },
        { -3, -1 }, { -2, -1 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { 2, -1 }, { 3, -1 },
        { -3,  0 }, { -2,  0 }, { -1,  0 }, { 0,  0 }, { 1,  0 }, { 2,  0 }, { 3,  0 },
        { -3,  1 }, { -2,  1 }, { -1,  1 }, { 0,  1 }, { 1,  1 }, { 2,  1 }, { 3,  1 },
                    { -2,  2 }, { -1,  2 }, { 0,  2 }, { 1,  2 }, { 2,  2 },
                                { -1,  3 }, { 0,  3 }, { 1,  3 }
    }
};








//---------------------------------------------------------------------
// 두 타일간의 거리 구하는 함수.
//---------------------------------------------------------------------
float Distance(int iTileX1, int iTileY1, int iTileX2, int iTileY2)
{
    int iDX = abs(iTileX1 - iTileX2);
    int iDY = abs(iTileY1 - iTileY2);

    return sqrtf(iDX * iDX + iDY * iDY);
}



//---------------------------------------------------------------------
// Pos1 -> Pos2 방향으로 Pos2 가 1.0f 거리만큼 밀려난 위치 PushX,PushY 를 구하는 함수.
//---------------------------------------------------------------------
void AttackPushPos(float fPos1X, float fPos1Y, float fPos2X, float fPos2Y, float *pPushX, float *pPushY)
{
    // 1. 벡터 생성
    float VectorX = fPos2X - fPos1X;
    float VectorY = fPos2Y - fPos1Y;

    //-----------------------------------------------
    // 완전히 같은 자리라면 랜덤하게 방향을 잡음.
    //-----------------------------------------------
    if (VectorX == 0 && VectorY == 0)
    {
        VectorX = ((rand() % 10) - 5) / 10.0f;
        VectorY = ((rand() % 10) - 5) / 10.0f;
    }

    // 2. 노멀벡터 정규화
    float Len = sqrtf(VectorX * VectorX + VectorY * VectorY);

    VectorX = VectorX / Len;
    VectorY = VectorY / Len;

    // 3. 이동거리 1.0f 스칼라 곱
    *pPushX = fPos2X + VectorX * 0.8f;
    *pPushY = fPos2Y + VectorY * 0.8f;

    //*pPushX = fPos2X + VectorX * 1.0f;
    //*pPushY = fPos2Y + VectorY * 1.0f;
}

*/